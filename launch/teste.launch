<?xml version="1.0"?>
<launch>

  <arg name="robot_name"             default="robot"/>

  <arg name="world_path"             default="$(find phd)/resources/worlds/empty.world"/>
  <arg name="world_name"             default="empty"/>
  <arg name="map_config"             default="$(find phd)/resources/map/empty/map.yaml"/>
  <arg name="use_amcl"               default="false"/>

  <arg name="global_planner"         default="navfn/NavfnROS"/>
  <arg name="local_planner"          default="base_local_planner/TrajectoryPlannerROS"/>
  <arg name="global_layers"          default="[ {name: static_layer, type: 'costmap_2d::StaticLayer'}, {name: obstacles_layer, type: 'costmap_2d::VoxelLayer'}, {name: inflation_layer, type: 'costmap_2d::InflationLayer'}]" />
  <arg name="local_layers"           default="[ {name: obstacles_layer, type: 'costmap_2d::VoxelLayer'}, {name: inflation_layer, type: 'costmap_2d::InflationLayer'}]"/>
  <arg name="observation_sources"    default="laser_scan_front_observation"/>
  <arg name="xy_goal_tolerance"      default="0.1"/>
  <arg name="yaw_goal_tolerance"     default="3.1415"/>

  <arg name="database_input"         default="$(find social_reasoning)/ontology_input.db"/>

  <!--
  <arg name="enable_render"          default="true"/>
  <arg name="path_storage"           default=""/>
  <arg name="max_experiments"        default="10"/>
  <arg name="robot_path"             default=""/>

  <arg name="robot_max_vel"          default="0.3"/>
  <arg name="space_factor_tolerance" default="5"/>
  <arg name="time_factor_tolerance"  default="5"/> -->


<!-- ###################################################################### -->
<!-- ###################################################################### -->
<!-- ###################################################################### -->

  <!-- simulator gazebo -->
  <include file="$(find social_worlds)/launch/start_world.launch" >
    <arg name="world_path" default="$(arg world_path)" />
    <arg name="enable_gui" default="false" />
    <arg name="paused"     default="false" />
  </include>

  <!-- robot -->
  <include file="$(find hera_bringup)/launch/bring_up.launch" >
    <arg name="map_config"            default="$(arg map_config)"/>
    <arg name="use_amcl"              default="$(arg use_amcl)"/>
    <arg name="database_input"        default="$(arg database_input)"/>
    <arg name="global_planner"        default="$(arg global_planner)"/>
    <arg name="local_planner"         default="$(arg local_planner)"/>
    <arg name="global_layers"         default="$(arg global_layers)"/>
    <arg name="local_layers"          default="$(arg local_layers)"/>
    <arg name="observation_sources"   default="$(arg observation_sources)"/>
    <arg name="xy_goal_tolerance"     default="$(arg xy_goal_tolerance)"/>
    <arg name="yaw_goal_tolerance"    default="$(arg yaw_goal_tolerance)"/>
    <arg name="enable_map"            default="true"/>
    <arg name="enable_talk"           default="false"/>
    <arg name="enable_localization"   default="true"/>
    <arg name="enable_navigation"     default="true"/>
  </include>

  <!-- robot control (set head and kinect_plat to predefined angles (0.0 and 0.96))-->
  <node name="head_publisher" pkg="rostopic" type="rostopic" output="screen"
    args="pub /control/head std_msgs/Float64 'data: 0.0'" />
  <node name="kinect_plat_publisher" pkg="rostopic" type="rostopic" output="screen"
    args="pub /control/kinect_plat std_msgs/Float64 'data: 0.96'" />

  <!-- gym_social -->
  <!-- <node name="gym_social" pkg="gym_social" type="test1.py"
    output="screen" required="true">
    <param name="enable_render"             value="$(arg enable_render)"/>
    <param name="path_storage"              value="$(arg path_storage)"/>
    <param name="max_experiments"           value="$(arg max_experiments)"/>
    <param name="robot_path"                value="$(arg robot_path)"/>
    <param name="global_planner"            value="$(arg global_planner)"/>
    <param name="local_planner"             value="$(arg local_planner)"/>
    <param name="world_model_name"          value="$(arg world_name)"/>
    <param name="robot_model_name"          value="$(arg robot_name)"/>
    <param name="robot_max_vel"             value="$(arg robot_max_vel)"/>
    <param name="space_factor_tolerance"    value="$(arg space_factor_tolerance)"/>
    <param name="time_factor_tolerance"     value="$(arg time_factor_tolerance)"/>
  </node> -->

  <!-- real time factor publisher -->
  <node name="real_time_factor_publisher_node" pkg="social_worlds" type="real_time_factor_publisher_node" output="screen">
    <param name="world_name" value="default"/>
  </node>

  <!-- check robot collisions -->
  <node name="check_collision_node" pkg="social_worlds" type="check_collision_node" output="screen">
    <param name="world_name" value="$(arg world_name)"/>
    <param name="robot_name" value="$(arg robot_name)"/>
  </node>

  <!-- check_region -->
  <node name="check_forbidden_region" pkg="social_worlds" type="check_region_node" output="screen">
    <param name="region_name" value="forbidden_region"/>
    <param name="model_name" value="$(arg robot_name)"/>
  </node>



  <node name="pedsim_simulator" pkg="pedsim_simulator" type="pedsim_simulator" output="log">
    <param name="scene_file" value="$(find phd)/resources/pedsim_scenarios/social_contexts.xml" type="string"/>
    <param name="enable_groups" value="false" type="bool"/>
  </node>

  <!-- Visualizer -->
  <include file="$(find pedsim_visualizer)/launch/visualizer.launch"/>

  <!-- this node spawn pedsim actors to gazebo once, then the plugin updates their pose -->
  <node pkg="pedsim_gazebo_plugin" type="spawn_pedsim_agents.py" name="spawn_pedsim_agents"  output="screen">
    <param name="actor_model_file" value="$(find social_worlds)/models/human_cylinder_visual/model.sdf"/>
  </node>

  <!-- sincronize simulation factos of gazebo with pedsim -->
  <node pkg="pedsim_gazebo_plugin" type="update_pedsim_factor.py" name="update_pedsim_factor">
    <param name="node_to_reconfigure" value="pedsim_simulator"/>
    <param name="topic_with_new_factor" value="real_time_factor"/>
  </node>


</launch>
